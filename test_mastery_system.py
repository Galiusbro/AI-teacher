#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ mastery.

–ó–∞–ø—É—Å–∫: python test_mastery_system.py
"""

import json
try:
    import requests
    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

from mastery_calculator import (
    MasteryCalculatorV2,
    calculate_lesson_mastery_v2,
    update_learning_mastery_v2,
    next_lesson_recommendation_v2,
    get_mastery_description
)


def test_mastery_calculator():
    """–¢–µ—Å—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ mastery."""
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ mastery...")

    calculator = MasteryCalculatorV2()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    submissions_history = [
        {
            'score': 0.8,
            'created_at': '2024-01-01T10:00:00Z',
            'lesson_type': 'concept'
        },
        {
            'score': 0.9,
            'created_at': '2024-01-02T10:00:00Z',
            'lesson_type': 'guided'
        },
        {
            'score': 0.7,
            'created_at': '2024-01-03T10:00:00Z',
            'lesson_type': 'guided'
        }
    ]

    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ mastery –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios = [
        {
            'lesson_type': 'concept',
            'time_spent': 250,  # 4 –º–∏–Ω—É—Ç—ã - –±—ã—Å—Ç—Ä–æ
            'score': 0.9,       # –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            'difficulty': 'medium',
            'expected_mastery': 0.8  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        },
        {
            'lesson_type': 'guided',
            'time_spent': 700,  # 11 –º–∏–Ω—É—Ç - –¥–æ–ª–≥–æ
            'score': 0.6,       # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            'difficulty': 'hard',
            'expected_mastery': 0.4  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        },
        {
            'lesson_type': 'independent',
            'time_spent': 1200, # 20 –º–∏–Ω—É—Ç - –æ—á–µ–Ω—å –¥–æ–ª–≥–æ
            'score': 0.3,       # –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            'difficulty': 'easy',
            'expected_mastery': 0.2  # –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        }
    ]

    for i, scenario in enumerate(scenarios):
        mastery, diagnostics = calculator.lesson_mastery(
            submissions_history,
            scenario['lesson_type'],
            scenario['time_spent'],
            scenario['score'],
            scenario['difficulty']
        )

        print(f"  –¢–µ—Å—Ç {i+1}: {scenario['lesson_type']} —É—Ä–æ–∫")
        print(f"    –í—Ä–µ–º—è: {scenario['time_spent']} —Å–µ–∫, –û—Ü–µ–Ω–∫–∞: {scenario['score']}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–Ω—ã–π mastery: {mastery:.3f}")
        print(f"    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {diagnostics}")
        print()


def test_mastery_update():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è mastery."""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è mastery...")

    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_mastery = {
        'overall': 0.0,
        'concept': 0.0,
        'guided': 0.0,
        'independent': 0.0,
        'assessment': 0.0
    }

    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    updates = [
        ('concept', 0.8, 5),
        ('guided', 0.7, 6),
        ('guided', 0.9, 7),
        ('independent', 0.6, 8)
    ]

    current_mastery = initial_mastery.copy()

    for lesson_type, lesson_mastery, submissions_count in updates:
        current_mastery = update_learning_mastery_v2(
            current_mastery, lesson_type, lesson_mastery, submissions_count
        )

        print(f"  –ü–æ—Å–ª–µ {lesson_type} —É—Ä–æ–∫–∞:")
        print(f"    –û–±—â–∏–π mastery: {current_mastery['overall']}")
        print(f"    –î–µ—Ç–∞–ª–∏: {current_mastery}")
        print()


def test_next_lesson_recommendation():
    """–¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞."""
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞...")

    test_cases = [
        {
            'mastery': {'overall': 0.2, 'concept': 0.3, 'guided': 0.0},
            'name': '–ù–∞—á–∏–Ω–∞—é—â–∏–π —É—á–µ–Ω–∏–∫'
        },
        {
            'mastery': {'overall': 0.5, 'concept': 0.9, 'guided': 0.6},
            'name': '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å'
        },
        {
            'mastery': {'overall': 0.8, 'concept': 0.9, 'guided': 0.9, 'independent': 0.7},
            'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—á–µ–Ω–∏–∫'
        }
    ]

    for case in test_cases:
        next_type, reason = next_lesson_recommendation_v2(
            case['mastery'], {}, {}  # –ü—É—Å—Ç–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ —Å—á–µ—Ç—á–∏–∫–∏
        )

        description = get_mastery_description(case['mastery']['overall'])

        print(f"  {case['name']}:")
        print(f"    Mastery: {case['mastery']['overall']} ({description})")
        print(f"    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–∫: {next_type}")
        print(f"    –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        print()


def test_api_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)."""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

    if not HAS_REQUESTS:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª—å requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
        response = requests.get('http://localhost:3000/api/health', timeout=2)
        if response.status_code == 200:
            print("  ‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ mastery
            test_student_id = "95ef01b7-ebfd-4320-a41b-9550e88551b5"
            response = requests.get(f'http://localhost:3000/api/mastery/{test_student_id}', timeout=5)

            if response.status_code == 200:
                data = response.json()
                print("  ‚úÖ API mastery —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"    –ú–æ–¥—É–ª–µ–π: {data['summary']['total_modules']}")
                print(f"    –°—Ä–µ–¥–Ω–∏–π mastery: {data['summary']['average_mastery']:.3f}")
            else:
                print(f"  ‚ö†Ô∏è  API mastery –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
        else:
            print("  ‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    except requests.exceptions.RequestException:
        print("  ‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã mastery\n")

    test_mastery_calculator()
    test_mastery_update()
    test_next_lesson_recommendation()
    test_api_integration()

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    main()
