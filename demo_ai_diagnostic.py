#!/usr/bin/env python3
"""
AI-–üowered –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ Ayaal Teacher.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
2. AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
3. –ê–¥–∞–ø—Ç–∏–≤–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
4. –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π mastery
"""

import requests
import json
import time
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE = "http://localhost:3000"
STUDENT_ID = "87b7df4c-0246-46d8-af27-54fdb1a826f7"


def print_separator(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    print(f"\n{'='*80}")
    print(f"üéØ {title}")
    print(f"{'='*80}")


def api_call(endpoint, method="GET", data=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API."""
    url = f"{API_BASE}{endpoint}"
    headers = {"Content-Type": "application/json"}

    try:
        if method == "POST":
            response = requests.post(url, json=data, headers=headers)
        else:
            response = requests.get(url)

        return response.json()
    except Exception as e:
        return {"error": str(e)}


def demonstrate_ai_diagnostic_flow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print_separator("AI-–ü–û–í–ï–†–ï–î –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–ß–ï–ù–ò–ö–ê")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞...")
    status = api_call(f"/api/diagnostic/student/{STUDENT_ID}")

    if "error" in status:
        print(f"‚ùå –û—à–∏–±–∫–∞: {status['error']}")
        return

    print(f"   –°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {status['diagnostic_status']}")
    if status['diagnostic_status'] == 'not_started':
        print("   ‚úÖ –£—á–µ–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ!")
    else:
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {status.get('last_diagnostic', {}).get('completed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

    # 2. –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é...")

    # –ü–æ–ª—É—á–∞–µ–º UUID—ã –¥–ª—è –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ Primary —É—Ä–æ–≤–Ω—è
    try:
        import subprocess
        result = subprocess.run([
            'psql', '-h', 'localhost', '-p', '5432', '-U', 'gp', '-d', 'ayaal_teacher',
            '-c', "SELECT id FROM subject WHERE code = 'Mathematics';"
        ], capture_output=True, text=True)

        math_subject_id = None
        lines = result.stdout.split('\n')
        for line in lines:
            line = line.strip()
            if len(line) == 36 and '-' in line:
                math_subject_id = line
                break

        result = subprocess.run([
            'psql', '-h', 'localhost', '-p', '5432', '-U', 'gp', '-d', 'ayaal_teacher',
            '-c', "SELECT id FROM stage WHERE code = 'stage_primary';"
        ], capture_output=True, text=True)

        primary_stage_id = None
        lines = result.stdout.split('\n')
        for line in lines:
            line = line.strip()
            if len(line) == 36 and '-' in line:
                primary_stage_id = line
                break

        if not math_subject_id or not primary_stage_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —É—Ä–æ–≤–Ω—è")
            return

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID–æ–≤: {e}")
        return

    start_result = api_call("/api/diagnostic/start", "POST", {
        "student_id": STUDENT_ID,
        "subject_id": math_subject_id,
        "stage_id": primary_stage_id
    })

    if "error" in start_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {start_result['error']}")
        return

    session_id = start_result['session_id']
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
    print("   üéì –ü—Ä–µ–¥–º–µ—Ç: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞)")

    # 3. –ü—Ä–æ—Ö–æ–¥–∏–º AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (—Å–∏–º—É–ª–∏—Ä—É–µ–º —É—á–µ–Ω–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)
    print("\n3Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏–º AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    print("   ü§ñ AI –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞...")

    question_count = 0
    current_level = 'beginner'

    while question_count < 5:  # –ú–∞–∫—Å–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_result = api_call("/api/diagnostic/question", "POST", {
            "session_id": session_id,
            "current_level": current_level
        })

        if "question" not in question_result:
            if "message" in question_result:
                print(f"\n   üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {question_result['message']}")
                break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {question_result}")
                break

        question = question_result['question']
        question_count += 1

        print(f"\n   üß† –í–æ–ø—Ä–æ—Å {question_count} (AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω):")
        print(f"      üìö –£—Ä–æ–≤–µ–Ω—å: {question['difficulty_level']}")
        print(f"      ‚è∞ –í—Ä–µ–º—è: {question['time_limit_sec']} —Å–µ–∫")
        print(f"      üíØ –ë–∞–ª–ª—ã: {question['points']}")

        content = question['content']
        print(f"      ‚ùì {content['question']}")

        if 'options' in content:
            print("      üìã –í–∞—Ä–∏–∞–Ω—Ç—ã:")
            for i, option in enumerate(content['options']):
                print(f"         {i+1}. {option}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ 80% —Å–ª—É—á–∞–µ–≤)
        import random
        is_correct_answer = random.random() < 0.8

        if question['question_type'] == 'mcq' and 'options' in content:
            if is_correct_answer:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ —É—á–µ–Ω–∏–∫ –∑–Ω–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
                selected_option = content.get('correct_option', 0) if 'correct_option' in content else 0
            else:
                # –°–ª—É—á–∞–π–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                selected_option = random.randint(0, len(content['options']) - 1)

            answer = {"selected_option": selected_option}
        else:
            answer = {"answer": "42" if is_correct_answer else "–Ω–µ –∑–Ω–∞—é"}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        answer_result = api_call("/api/diagnostic/answer", "POST", {
            "session_id": session_id,
            "question_id": question['question_id'],
            "answer": answer,
            "time_spent_sec": random.randint(30, 120)
        })

        if "error" in answer_result:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {answer_result['error']}")
            continue

        result = answer_result['result']
        print(f"      ‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if result['is_correct'] else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
        print(f"      üìä –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['total_score']:.2f}")
        print(f"      üìà –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {result['next_level']}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_level = result['next_level']

        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

    # 4. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    print("\n4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    complete_result = api_call("/api/diagnostic/complete", "POST", {
        "session_id": session_id
    })

    if "error" in complete_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {complete_result['error']}")
        return

    diagnostic_result = complete_result['diagnostic_result']
    print("   üéä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"      üèÜ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {diagnostic_result['estimated_level']}")
    print(f"      üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {diagnostic_result['recommended_difficulty']}")

    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n5Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    results = api_call(f"/api/diagnostic/results/{session_id}")

    if "error" not in results and 'results' in results:
        results_data = results['results']
        print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:")
        print(f"      ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {results_data['total_questions']}")
        print(f"      ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results_data['correct_answers']}")
        print(f"      ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {results_data['accuracy']:.3f}")
        print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {results_data['avg_time_spent']:.1f} —Å–µ–∫")
        print(f"      ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º: {results_data['level_distribution']}")

    if 'recommendations' in results:
        recommendations = results['recommendations']
        print("\n   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é:")
        for rec in recommendations.get('study_plan', []):
            print(f"      ‚Ä¢ {rec}")
        for rec in recommendations.get('focus_areas', []):
            print(f"      ‚Ä¢ {rec}")

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞...")
    updated_status = api_call(f"/api/diagnostic/student/{STUDENT_ID}")

    if "error" not in updated_status:
        print("   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:")
        print(f"      ‚Ä¢ –°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {updated_status['diagnostic_status']}")
        print(f"      ‚Ä¢ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {updated_status.get('current_level', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        print(f"      ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {updated_status.get('recommended_difficulty', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
        print("      ‚Ä¢ –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π mastery!")


def demonstrate_ai_power():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print_separator("–°–ò–õ–ê AI –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")

    print("üöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ AI-powered –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print("   üß† –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ —É—á–µ–Ω–∏–∫–∞")
    print("   üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è")
    print("   üìà –î–∏–Ω–∞–º–∏–∫–∞ - —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—è–µ—Ç—Å—è –ø–æ —Ö–æ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("   üîç –ê–Ω–∞–ª–∏–∑ - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
    print("   üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∂–∏–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")
    print("   üìö –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

    print("\nüìä –ß—Ç–æ —É–º–µ–µ—Ç —Å–∏—Å—Ç–µ–º–∞:")
    print("   ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è")
    print("   ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–æ–≤")
    print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è")
    print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π mastery")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ AI-–ü–û–í–ï–†–ï–î –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í AYAAL TEACHER")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ—â—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    health = api_call("/api/health")
    if "database" in health and health["database"] == "connected":
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AI
    ai_available = "GROQ_API_KEY" in str(os.environ.get('GROQ_API_KEY', ''))
    if ai_available:
        print("‚úÖ AI (Groq) –¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —É–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    else:
        print("‚ö†Ô∏è  AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    demonstrate_ai_diagnostic_flow()
    demonstrate_ai_power()

    print_separator("–ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("üéâ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    print("\nüí° –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Ä–æ–≤–Ω—è")
    print("   ‚úÖ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞")
    print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å —Å–∏—Å—Ç–µ–º–æ–π mastery")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è")

    print("\nüéì –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("   ‚Ä¢ –ù–æ–≤—ã–µ —É—á–µ–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
    print("   ‚Ä¢ –ö–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É")
    print("   ‚Ä¢ AI —Å–æ–∑–¥–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å –º–µ—Ç–æ–¥–∏–∫—É –æ–±—É—á–µ–Ω–∏—è")


if __name__ == "__main__":
    main()
