#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã Mastery —á–µ—Ä–µ–∑ API /api/next.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫.
"""

import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE = "http://localhost:3000"
STUDENT_ID = "65e32701-fccf-46c4-ba7f-44ab7853444c"
MODULE_CODE = "module_math_numbers_primary"


def print_separator(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    print(f"\n{'='*70}")
    print(f"üéØ {title}")
    print(f"{'='*70}")


def test_api_next():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API /api/next —Å –Ω–∞—à–µ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π mastery."""
    print_separator("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API /api/next")

    print("üìö –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ß–∏—Å–ª–∞ (–Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)")
    print(f"üë§ ID —É—á–µ–Ω–∏–∫–∞: {STUDENT_ID}")
    print(f"üìñ –ö–æ–¥ –º–æ–¥—É–ª—è: {MODULE_CODE}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = requests.post(
        f"{API_BASE}/api/next",
        json={
            "student_id": STUDENT_ID,
            "module_code": MODULE_CODE
        },
        headers={"Content-Type": "application/json"}
    )

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
        return

    try:
        data = response.json()

        if "error" in data:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {data['error']}")
            return

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüéâ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢ –û–¢ –°–ò–°–¢–ï–ú–´ MASTERY!")
        print("\nüìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –£–ß–ï–ù–ò–ö–ê:")
        print(f"   ‚Ä¢ –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å mastery: {data['current_mastery']:.3f}")
        print(f"   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è: {data['mastery_description']}")

        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        mastery_details = data['mastery_details']
        for key, value in mastery_details.items():
            if key not in ['last_updated', 'total_submissions']:
                print(f"   ‚Ä¢ {key}: {value:.3f}")

        print("\nüéì –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´:")
        print(f"   ‚Ä¢ –¢–∏–ø —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞: {data['next_lesson_type']}")

        print("\nüß† –õ–û–ì–ò–ö–ê –†–ï–®–ï–ù–ò–Ø:")
        print(f"   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {data['reason']}")

        if 'lesson' in data and data['lesson']:
            lesson = data['lesson']
            print("\nüìñ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –£–†–û–ö:")
            print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {lesson.get('title', 'N/A')}")
            print(f"   ‚Ä¢ –¢–∏–ø: {lesson.get('type', 'N/A')}")
            print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: {len(lesson.get('blocks', []))}")

            # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
            if lesson.get('blocks') and len(lesson['blocks']) > 0:
                first_block = lesson['blocks'][0]
                print(f"   ‚Ä¢ –ü–µ—Ä–≤—ã–π –±–ª–æ–∫: {first_block.get('type', 'N/A')} - {first_block.get('content', {}).get('title', 'N/A')}")

        print_separator("–í–´–í–û–î–´")

        print("üí° –°–ò–°–¢–ï–ú–ê MASTERY –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û:")
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è —É—á–µ–Ω–∏–∫–∞")
        print("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º")
        print("   ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤")
        print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        print("   ‚úÖ –£—á–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –º–æ–¥—É–ª—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ insights
        overall = data['current_mastery']
        if overall < 0.3:
            print("\nüéì –ò–ù–°–ê–ô–¢: –£—á–µ–Ω–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –æ–±—É—á–µ–Ω–∏—è")
            print("   –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç concept —É—Ä–æ–∫–∏ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ –æ—Å–Ω–æ–≤")
        elif overall < 0.6:
            print("\nüéì –ò–ù–°–ê–ô–¢: –£—á–µ–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏")
            print("   –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç guided —É—Ä–æ–∫–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        else:
            print("\nüéì –ò–ù–°–ê–ô–¢: –£—á–µ–Ω–∏–∫ –ø–æ–∫–∞–∑–∞–ª —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")


def test_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API."""
    print_separator("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø API")

    try:
        response = requests.get(f"{API_BASE}/api/health")
        if response.status_code == 200:
            health = response.json()
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:")
            print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {health.get('status', 'unknown')}")
            print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {health.get('database', 'unknown')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ MASTERY V2")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è –æ—Å–≤–æ–µ–Ω–∏—è")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    test_health()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    test_api_next()

    print_separator("–ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("üéâ –°–∏—Å—Ç–µ–º–∞ mastery —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    print("\nüí° –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
    print("   ‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ—á–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)")
    print("   ‚Ä¢ EMA –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è")
    print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–æ–≤")
    print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")


if __name__ == "__main__":
    main()
