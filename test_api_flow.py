#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã API —Å–∏—Å—Ç–µ–º—ã mastery.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è mastery –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–æ–≤.
"""

import requests
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE = "http://localhost:3000"
STUDENT_ID = "65e32701-fccf-46c4-ba7f-44ab7853444c"
MODULE_CODE = "module_math_numbers_primary"


def print_separator(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    print(f"\n{'='*60}")
    print(f"üéØ {title}")
    print(f"{'='*60}")


def api_call(endpoint, method="GET", data=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API."""
    url = f"{API_BASE}{endpoint}"
    headers = {"Content-Type": "application/json"}

    try:
        if method == "POST":
            response = requests.post(url, json=data, headers=headers)
        else:
            response = requests.get(url)

        return response.json()
    except Exception as e:
        return {"error": str(e)}


def format_mastery_details(mastery_details):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ mastery –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
    if not mastery_details:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    result = []
    for key, value in mastery_details.items():
        if key != "last_updated" and key != "total_submissions":
            result.append(f"{key}: {value:.3f}")

    return " | ".join(result)


def simulate_student_progress():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ API."""
    print_separator("–°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–ì–†–ï–°–°–ê –£–ß–ï–ù–ò–ö–ê")

    # –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("üìä –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    initial_state = api_call("/api/next", "POST", {
        "student_id": STUDENT_ID,
        "module_code": MODULE_CODE
    })

    if "error" in initial_state:
        print(f"‚ùå –û—à–∏–±–∫–∞: {initial_state['error']}")
        return

    print("üèÜ –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:"    print(f"   –û–±—â–∏–π mastery: {initial_state['current_mastery']:.3f}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {initial_state['mastery_description']}")
    print(f"   –î–µ—Ç–∞–ª–∏: {format_mastery_details(initial_state['mastery_details'])}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {initial_state['next_lesson_type']} —É—Ä–æ–∫")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {initial_state['reason']}")

    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤
    print("\nüìù –®–ê–ì 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–∞")

    # –°—Ü–µ–Ω–∞—Ä–∏–π: —É—á–µ–Ω–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç concept —É—Ä–æ–∫ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    submissions = [
        {
            "lesson_type": "concept",
            "score": 0.85,
            "time_spent": 180,
            "difficulty": "easy",
            "description": "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ concept —É—Ä–æ–∫–µ"
        },
        {
            "lesson_type": "concept",
            "score": 0.90,
            "time_spent": 150,
            "difficulty": "easy",
            "description": "–ï—â–µ –æ–¥–∏–Ω —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        },
        {
            "lesson_type": "guided",
            "score": 0.75,
            "time_spent": 240,
            "difficulty": "medium",
            "description": "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ guided —É—Ä–æ–∫–µ"
        },
        {
            "lesson_type": "guided",
            "score": 0.80,
            "time_spent": 200,
            "difficulty": "medium",
            "description": "–£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ guided —É—Ä–æ–∫–µ"
        }
    ]

    for i, submission in enumerate(submissions, 1):
        print(f"\n   –û—Ç–≤–µ—Ç {i}: {submission['description']}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        result = api_call("/api/submissions", "POST", {
            "student_id": STUDENT_ID,
            "module_code": MODULE_CODE,
            "lesson_id": f"lesson_{MODULE_CODE}_{submission['lesson_type']}_01",
            "task_id": f"task_{submission['lesson_type']}_{i}",
            "kind": "practice",
            "answer_jsonb": {"selected_option": 2, "correct_option": 2},
            "score": submission['score'],
            "time_spent": submission['time_spent'],
            "difficulty": submission['difficulty']
        })

        if "error" in result:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            continue

        print("      ‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç:"        print(f"         Mastery —É—Ä–æ–∫–∞: {result['lesson_mastery']:.3f}")
        print(f"         –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Ç–æ—á–Ω–æ—Å—Ç—å={result['mastery_diagnostics']['accuracy']:.2f}, —Å–∫–æ—Ä–æ—Å—Ç—å={result['mastery_diagnostics']['speed']:.2f}")
        print(f"         –û–±—â–∏–π mastery: {result['overall_mastery']:.3f} ({result['mastery_description']})")
        print(f"         –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫: {result['next_recommended']}")

    # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\nüìä –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    final_state = api_call("/api/next", "POST", {
        "student_id": STUDENT_ID,
        "module_code": MODULE_CODE
    })

    if "error" not in final_state:
        print("üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:"        print(f"   –û–±—â–∏–π mastery: {final_state['current_mastery']:.3f}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {final_state['mastery_description']}")
        print(f"   –î–µ—Ç–∞–ª–∏: {format_mastery_details(final_state['mastery_details'])}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {final_state['next_lesson_type']} —É—Ä–æ–∫")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {final_state['reason']}")


def show_mastery_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É mastery —É—á–µ–Ω–∏–∫–∞."""
    print_separator("–°–¢–ê–¢–ò–°–¢–ò–ö–ê MASTERY –£–ß–ï–ù–ò–ö–ê")

    stats = api_call(f"/api/mastery/{STUDENT_ID}")

    if "error" in stats:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
        return

    print(f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {stats['student_id']}")
    print(f"üìö –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {stats['summary']['total_modules']}")
    print(f"üèÜ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {stats['summary']['average_mastery']:.3f}")
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {stats['summary']['completed_modules']}")

    if stats['modules']:
        print("\nüìñ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º:")
        for module in stats['modules']:
            print(f"\n   üìö {module['module_title']}")
            print(f"      –ü—Ä–µ–¥–º–µ—Ç: {module['subject']}")
            print(f"      –£—Ä–æ–≤–µ–Ω—å: {module['stage']}")
            print(f"      Mastery: {module['mastery']['overall']:.3f} ({module['mastery_description']})")
            print(f"      –î–µ—Ç–∞–ª–∏: {format_mastery_details(module['mastery'])}")
            print(f"      –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫: {module['next_recommended']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API —Å–∏—Å—Ç–µ–º—ã Mastery –≤ Ayaal Teacher")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –æ—Å–≤–æ–µ–Ω–∏—è"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    health = api_call("/api/health")
    if "database" in health and health["database"] == "connected":
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    simulate_student_progress()
    show_mastery_statistics()

    print_separator("–ó–ê–í–ï–†–®–ï–ù–ò–ï")
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –°–∏—Å—Ç–µ–º–∞ mastery —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –æ—Å–≤–æ–µ–Ω–∏—è")
    print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º")
    print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤")
    print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π")


if __name__ == "__main__":
    main()
