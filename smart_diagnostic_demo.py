#!/usr/bin/env python3
"""
–£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Ayaal Teacher.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞
2. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã
3. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
4. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
5. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
"""

import json
import time
import os
from typing import Dict, List, Any
from smart_diagnostic_system import SmartDiagnosticSystem, DifficultyLevel

def print_separator(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    print(f"\n{'='*80}")
    print(f"üéØ {title}")
    print(f"{'='*80}")


def demonstrate_smart_diagnostic_flow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print_separator("–£–ú–ù–ê–Ø –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    system = SmartDiagnosticSystem()

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞...")
    student_id = "demo_student_001"
    student_age = 10
    subjects = ["Mathematics", "English"]

    profile = system.initialize_student_profile(
        student_id=student_id,
        age=student_age,
        subjects=subjects
    )

    print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_age} –ª–µ—Ç")
    print("   üìö –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: Mathematics, English")
    print(f"   üéØ –ù–∞—á–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    for subject, data in profile.subjects.items():
        print(f"      ‚Ä¢ {subject}: {data['current_level']}")

    # 2. –ü—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("\n2Ô∏è‚É£ –ü—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    print("   ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞...")

    all_questions = []
    question_count = 0
    max_questions = 12  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

    for subject in subjects:
        print(f"\n   üìñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject}")

        while question_count < max_questions:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            question = system.generate_next_question(student_id, subject)

            if question is None:
                print(f"   üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                break

            question_count += 1
            all_questions.append(question)

            print(f"\n   üß† –í–æ–ø—Ä–æ—Å {question_count} ({subject}):")
            print(f"      üéØ –£—Ä–æ–≤–µ–Ω—å: {question.difficulty_level.value}")
            print(f"      üéì –¶–µ–ª–µ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {question.target_age} –ª–µ—Ç")
            print(f"      üß© –¢–∏–ø: {question.question_type}")
            print(f"      üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {question.cognitive_domain.value}")
            print(f"      ‚è∞ –í—Ä–µ–º—è: {question.estimated_time_sec} —Å–µ–∫")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞
            content = question.content
            print(f"      ‚ùì {content['question']}")

            if question.question_type == "dialogue":
                print("      üí¨ –≠—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
                if "—Ä–∞—Å—Å–∫–∞–∂–∏" in content['question'].lower():
                    simulated_answer = {
                        "answer": "–ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–µ–π –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏ —ç—Ç–æ –∫–∞–∫ –∏–≥—Ä–∞-–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞. –Ø –ª—é–±–ª—é —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏.",
                        "question_type": "dialogue"
                    }
                else:
                    simulated_answer = {
                        "answer": "–û–±—ã—á–Ω–æ —è —Å–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞—é —É—Å–ª–æ–≤–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –ø–æ—Ç–æ–º —Ä–∏—Å—É—é —Å—Ö–µ–º—É –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –Ω–∞—á–∏–Ω–∞—é –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
                        "question_type": "dialogue"
                    }
            elif question.question_type == "mcq_single":
                options = content.get('options', [])
                if options:
                    print("      üìã –í–∞—Ä–∏–∞–Ω—Ç—ã:")
                    for i, option in enumerate(options):
                        marker = "‚úÖ" if option.get('is_correct') else f"{i+1}."
                        print(f"         {marker} {option['text']}")

                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                if options and len(options) > 0:
                    correct_option = next((i for i, opt in enumerate(options) if opt.get('is_correct')), 0)
                    simulated_answer = {"selected_option": correct_option}
                else:
                    simulated_answer = {"selected_option": 0}
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
                simulated_answer = {"answer": "42"}

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
            time_spent = min(question.estimated_time_sec + random.randint(-10, 20), 300)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            result = system.process_answer(
                student_id=student_id,
                question_id=question.id,
                answer=simulated_answer,
                time_spent_sec=time_spent,
                profile=profile
            )

            if "error" in result:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
                continue

            is_correct = result['is_correct']
            print(f"      ‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
            print(f"      üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {result['new_difficulty_level']}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            profile.current_difficulty[subject] = DifficultyLevel(result['new_difficulty_level'])

            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –ø–æ—Å–ª–µ 6 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
            if question_count % 6 == 0 and subject == subjects[0]:
                break

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è...")
    learning_plan = system.generate_learning_plan(student_id)

    print("   üìã –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print(f"      üéØ –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {learning_plan['overall_level']}")
    print(f"      üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
    print("\n      üìö –û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:")
    for subject, data in learning_plan['subject_breakdown'].items():
        accuracy = data['correct_answers'] / max(data['questions_asked'], 1)
        print(f"         üìñ {subject}: {accuracy:.1%}")
        print(f"         ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {data['total_time_spent'] / max(data['questions_asked'], 1):.1f} —Å–µ–∫")

    if learning_plan['strengths']:
        print("\n      üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
        for strength in learning_plan['strengths'][:3]:
            print(f"         ‚Ä¢ {strength}")

    if learning_plan['weaknesses']:
        print("\n      üéØ –ó–æ–Ω—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:")
        for weakness in learning_plan['weaknesses'][:3]:
            print(f"         ‚Ä¢ {weakness}")

    # 4. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    print("\n4Ô∏è‚É£ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞...")
    psych_profile = learning_plan['psychological_profile']

    if psych_profile:
        print("   üß† –ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
        for key, value in psych_profile.items():
            print(f"      ‚Ä¢ {key}: {value}")
    else:
        print("   üìù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è")

    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n5Ô∏è‚É£ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    recommendations = learning_plan['recommendations']

    print("   üéØ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å:")
    for focus in recommendations['immediate_focus'][:2]:
        print(f"      ‚Ä¢ {focus}")

    print("\n      üìÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫:")
    schedule = recommendations['study_schedule']
    print(f"      ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è: {schedule['daily_time']} –º–∏–Ω—É—Ç")
    print(f"      ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(schedule['preferred_subjects'])}")

    print("\n      üéì –ü–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é:")
    print(f"      ‚Ä¢ {recommendations['teaching_approach']}")

    return learning_plan


def demonstrate_ai_power():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print_separator("–°–ò–õ–ê –£–ú–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")

    print("üöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É–º–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print("   üß† –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É—Ä–æ–≤–Ω—è –Ω–∞ 2 –≥–æ–¥–∞ –º–ª–∞–¥—à–µ –≤–æ–∑—Ä–∞—Å—Ç–∞")
    print("   üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")
    print("   üìà –î–∏–Ω–∞–º–∏–∫–∞ - —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—è–µ—Ç—Å—è –ø–æ —Ö–æ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   üß© –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏")
    print("   üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞")
    print("   üìö –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤")

    print("\nüéØ –ß—Ç–æ —É–º–µ–µ—Ç —Å–∏—Å—Ç–µ–º–∞:")
    print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ —É—á–µ–Ω–∏–∫–∞")
    print("   ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ (MCQ, —á–∏—Å–ª–æ–≤—ã–µ, —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ)")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á")
    print("   ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–æ–≤/–Ω–µ—É–¥–∞—á")
    print("   ‚úÖ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   ‚úÖ –°–æ–±–∏—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞")
    print("   ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è")
    print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é")

    print("\nüß© –¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:")
    print("   üìã MCQ (Multiple Choice) - –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    print("   üî¢ Numeric - —á–∏—Å–ª–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
    print("   üìù Short Text - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã")
    print("   üí¨ Dialogue - –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏")
    print("   üß© Problem Solving - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")


def demonstrate_templates():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    print_separator("–®–ê–ë–õ–û–ù–´ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–• –í–û–ü–†–û–°–û–í")

    print("üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤:")
    print("""
   diagnostic.schema.json:
   ‚îú‚îÄ‚îÄ id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞)
   ‚îú‚îÄ‚îÄ subject (–ø—Ä–µ–¥–º–µ—Ç)
   ‚îú‚îÄ‚îÄ target_age (—Ü–µ–ª–µ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç)
   ‚îú‚îÄ‚îÄ difficulty_level (—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
   ‚îú‚îÄ‚îÄ question_type (—Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞)
   ‚îú‚îÄ‚îÄ cognitive_domain (–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –ë–ª—É–º—É)
   ‚îú‚îÄ‚îÄ content (–∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞)
   ‚îú‚îÄ‚îÄ scoring (—Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è)
   ‚îú‚îÄ‚îÄ adaptation_rules (–ø—Ä–∞–≤–∏–ª–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)
   ‚îî‚îÄ‚îÄ psychological_profile (–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å)
    """)

    print("üé® –¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print("   üìã mcq_single - –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    print("   üìã mcq_multiple - –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("   üî¢ numeric - —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
    print("   üìù short_text - –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    print("   üìù long_text - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    print("   üí¨ dialogue - –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    print("   üß© interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    print("   üß© problem_solving - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á")

    print("\nüß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–ø–æ –ë–ª—É–º—É):")
    print("   üìñ Remember - –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤")
    print("   ü§î Understand - –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
    print("   üõ†Ô∏è  Apply - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π")
    print("   üîç Analyze - –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print("   ‚öñÔ∏è  Evaluate - –æ—Ü–µ–Ω–∫–∞ –∏–¥–µ–π")
    print("   üé® Create - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –£–ú–ù–ê–Ø –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í AYAAL TEACHER")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–¥—É—â–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AI
    ai_available = "GROQ_API_KEY" in str(os.environ.get('GROQ_API_KEY', ''))
    if ai_available:
        print("‚úÖ AI (Groq) –¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —É–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    else:
        print("‚ö†Ô∏è  AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —à–∞–±–ª–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    learning_plan = demonstrate_smart_diagnostic_flow()
    demonstrate_ai_power()
    demonstrate_templates()

    print_separator("–ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("üéâ –£–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    print("\nüí° –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Ä–æ–≤–Ω—è")
    print("   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É—á–µ–Ω–∏–∫–∞")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞")
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π mastery")

    print("\nüéì –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´:")
    print("   ‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å —É—Ä–æ–≤–Ω—è –Ω–∞ 2 –≥–æ–¥–∞ –º–ª–∞–¥—à–µ –≤–æ–∑—Ä–∞—Å—Ç–∞")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON —à–∞–±–ª–æ–Ω—ã")
    print("   ‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–µ–Ω–∏–∫–∞")
    print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è")
    print("   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é")

    print("\nüöÄ –≠–¢–û –ë–£–î–£–©–ï–ï –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø!")
    print("   –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç:")
    print("   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
    print("   ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å")
    print("   ‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    print("   ‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è")
    print("   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é")


if __name__ == "__main__":
    import random
    main()
