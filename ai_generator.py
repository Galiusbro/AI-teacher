#!/usr/bin/env python3
"""
AI-powered lesson generator using Groq API.
Generates educational content based on module data and student context.
"""

import os
import json
import re
from typing import Dict, List, Any, Optional
from groq import Groq
from cache_manager import get_cached_lesson, save_lesson_to_cache


class AILessonGenerator:
    """AI-powered lesson generator using Groq."""

    def __init__(self):
        """Initialize Groq client."""
        api_key = os.environ.get("GROQ_API_KEY")
        if not api_key:
            raise ValueError("GROQ_API_KEY environment variable is required")

        self.client = Groq(api_key=api_key)
        self.model = "llama-3.3-70b-versatile"

    def generate_concept_lesson(self, module_data: Dict[str, Any], student_locale: str = 'ru') -> Dict[str, Any]:
        """Generate a concept lesson using AI."""

        # Check cache first
        module_code = module_data.get('code', 'unknown')
        cached_lesson = get_cached_lesson(module_code, 'concept', student_locale)
        if cached_lesson:
            print(f"Cache hit for {module_code} concept lesson")
            return cached_lesson

        # Extract module information
        subject = module_data.get('subject', 'General')
        title = module_data.get('title', 'Unknown Module')
        objectives = module_data.get('objectives_jsonb', [])

        # Prepare objectives text
        objectives_text = ""
        if isinstance(objectives, list):
            objectives_text = "\n".join([f"- {obj.get('description', '')}" for obj in objectives])

        # Create prompt for concept lesson
        prompt = f"""
–°–æ–∑–¥–∞–π —É—Ä–æ–∫ —Ç–∏–ø–∞ "concept" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –º–æ–¥—É–ª—è "{title}" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è:
{objectives_text}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
1. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ (theory) - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π
2. –ü—Ä–∏–º–µ—Ä (example) - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (interactive) - —Ç–µ—Å—Ç –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ JSON:
{{
  "id": "lesson_{module_data.get('code', 'unknown')}_concept_01",
  "type": "concept",
  "title": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞",
  "locale": "{student_locale}",
  "blocks": [
    {{
      "type": "theory",
      "content": {{
        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞",
        "text": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ..."
      }}
    }},
    {{
      "type": "example",
      "content": {{
        "title": "–ü—Ä–∏–º–µ—Ä",
        "text": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞..."
      }}
    }},
    {{
      "type": "interactive",
      "content": {{
        "type": "mcq",
        "question": "–í–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è?",
        "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"],
        "correct": 2,
        "explanation": "–ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞..."
      }}
    }}
  ]
}}

–°–¥–µ–ª–∞–π —É—Ä–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω—é —É—á–µ–Ω–∏–∫–∞.
"""

        try:
            chat_completion = self.client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": prompt,
                    }
                ],
                model=self.model,
                temperature=0.7,
                max_tokens=2000,
            )

            response_text = chat_completion.choices[0].message.content

            # Try to extract JSON from response
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                lesson_data = json.loads(json_match.group())
                # Save to cache
                save_lesson_to_cache(module_code, 'concept', lesson_data, student_locale)
                return lesson_data
            else:
                # Fallback to manual parsing or basic structure
                fallback_lesson = self._create_fallback_concept_lesson(module_data, student_locale)
                save_lesson_to_cache(module_code, 'concept', fallback_lesson, student_locale)
                return fallback_lesson

        except Exception as e:
            print(f"AI generation error: {e}")
            fallback_lesson = self._create_fallback_concept_lesson(module_data, student_locale)
            save_lesson_to_cache(module_code, 'concept', fallback_lesson, student_locale)
            return fallback_lesson

    def generate_guided_lesson(self, module_data: Dict[str, Any], student_locale: str = 'ru') -> Dict[str, Any]:
        """Generate a guided lesson using AI."""

        # Check cache first
        module_code = module_data.get('code', 'unknown')
        cached_lesson = get_cached_lesson(module_code, 'guided', student_locale)
        if cached_lesson:
            print(f"Cache hit for {module_code} guided lesson")
            return cached_lesson

        subject = module_data.get('subject', 'General')
        title = module_data.get('title', 'Unknown Module')

        prompt = f"""
–°–æ–∑–¥–∞–π —É—Ä–æ–∫ —Ç–∏–ø–∞ "guided" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –º–æ–¥—É–ª—è "{title}" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

Guided —É—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
1. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (instruction) - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (interactive) - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ JSON:
{{
  "id": "lesson_{module_data.get('code', 'unknown')}_guided_01",
  "type": "guided",
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏",
  "locale": "{student_locale}",
  "blocks": [
    {{
      "type": "instruction",
      "content": {{
        "title": "–ó–∞–¥–∞–Ω–∏–µ",
        "text": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏..."
      }}
    }},
    {{
      "type": "interactive",
      "content": {{
        "type": "drag_drop",
        "instruction": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        "items": [
          {{
            "number": "1",
            "objects": ["üçé", "üçé"]
          }},
          {{
            "number": "2",
            "objects": ["‚≠ê", "‚≠ê", "‚≠ê"]
          }}
        ]
      }}
    }}
  ]
}}

–°–¥–µ–ª–∞–π —É—Ä–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞.
"""

        try:
            chat_completion = self.client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": prompt,
                    }
                ],
                model=self.model,
                temperature=0.7,
                max_tokens=1500,
            )

            response_text = chat_completion.choices[0].message.content

            # Try to extract JSON from response
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                lesson_data = json.loads(json_match.group())
                # Save to cache
                save_lesson_to_cache(module_code, 'guided', lesson_data, student_locale)
                return lesson_data
            else:
                fallback_lesson = self._create_fallback_guided_lesson(module_data, student_locale)
                save_lesson_to_cache(module_code, 'guided', fallback_lesson, student_locale)
                return fallback_lesson

        except Exception as e:
            print(f"AI generation error: {e}")
            fallback_lesson = self._create_fallback_guided_lesson(module_data, student_locale)
            save_lesson_to_cache(module_code, 'guided', fallback_lesson, student_locale)
            return fallback_lesson

    def generate_independent_lesson(self, module_data: Dict[str, Any], student_locale: str = 'ru') -> Dict[str, Any]:
        """Generate an independent lesson using AI."""

        # Check cache first
        module_code = module_data.get('code', 'unknown')
        cached_lesson = get_cached_lesson(module_code, 'independent', student_locale)
        if cached_lesson:
            print(f"Cache hit for {module_code} independent lesson")
            return cached_lesson

        subject = module_data.get('subject', 'General')
        title = module_data.get('title', 'Unknown Module')

        prompt = f"""
–°–æ–∑–¥–∞–π —É—Ä–æ–∫ —Ç–∏–ø–∞ "independent" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –º–æ–¥—É–ª—è "{title}" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

Independent —É—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
1. –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ JSON:
{{
  "id": "lesson_{module_data.get('code', 'unknown')}_independent_01",
  "type": "independent",
  "title": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
  "locale": "{student_locale}",
  "blocks": [
    {{
      "type": "instruction",
      "content": {{
        "title": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        "text": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è..."
      }}
    }},
    {{
      "type": "interactive",
      "content": {{
        "type": "practice",
        "instruction": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
        "tasks": [
          {{
            "id": "task_1",
            "question": "–í–æ–ø—Ä–æ—Å –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?",
            "hint": "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ç—Ä—É–¥–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤..."
          }}
        ]
      }}
    }}
  ]
}}

–°–¥–µ–ª–∞–π —É—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

        try:
            chat_completion = self.client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": prompt,
                    }
                ],
                model=self.model,
                temperature=0.7,
                max_tokens=1500,
            )

            response_text = chat_completion.choices[0].message.content

            # Try to extract JSON from response
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                lesson_data = json.loads(json_match.group())
                # Save to cache
                save_lesson_to_cache(module_code, 'independent', lesson_data, student_locale)
                return lesson_data
            else:
                fallback_lesson = self._create_fallback_independent_lesson(module_data, student_locale)
                save_lesson_to_cache(module_code, 'independent', fallback_lesson, student_locale)
                return fallback_lesson

        except Exception as e:
            print(f"AI generation error: {e}")
            fallback_lesson = self._create_fallback_independent_lesson(module_data, student_locale)
            save_lesson_to_cache(module_code, 'independent', fallback_lesson, student_locale)
            return fallback_lesson

    def _create_fallback_concept_lesson(self, module_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """Create a basic concept lesson when AI fails."""
        return {
            "id": f"lesson_{module_data.get('code', 'unknown')}_concept_01",
            "type": "concept",
            "title": f"–û—Å–Ω–æ–≤—ã: {module_data.get('title', 'Unknown')}",
            "locale": locale,
            "blocks": [
                {
                    "type": "theory",
                    "content": {
                        "title": "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞",
                        "text": f"–ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤—ã –º–æ–¥—É–ª—è {module_data.get('title', 'Unknown')}."
                    }
                },
                {
                    "type": "example",
                    "content": {
                        "title": "–ü—Ä–∏–º–µ—Ä",
                        "text": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
                    }
                },
                {
                    "type": "interactive",
                    "content": {
                        "type": "mcq",
                        "question": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                        "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"],
                        "correct": 0,
                        "explanation": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
                    }
                }
            ]
        }

    def _create_fallback_guided_lesson(self, module_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """Create a basic guided lesson when AI fails."""
        return {
            "id": f"lesson_{module_data.get('code', 'unknown')}_guided_01",
            "type": "guided",
            "title": f"–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {module_data.get('title', 'Unknown')}",
            "locale": locale,
            "blocks": [
                {
                    "type": "instruction",
                    "content": {
                        "title": "–ó–∞–¥–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                        "text": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
                    }
                },
                {
                    "type": "interactive",
                    "content": {
                        "type": "guided_practice",
                        "instruction": "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è",
                        "steps": [
                            {"step": 1, "instruction": "–ü–µ—Ä–≤—ã–π —à–∞–≥"},
                            {"step": 2, "instruction": "–í—Ç–æ—Ä–æ–π —à–∞–≥"}
                        ]
                    }
                }
            ]
        }

    def _create_fallback_independent_lesson(self, module_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """Create a basic independent lesson when AI fails."""
        return {
            "id": f"lesson_{module_data.get('code', 'unknown')}_independent_01",
            "type": "independent",
            "title": f"–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {module_data.get('title', 'Unknown')}",
            "locale": locale,
            "blocks": [
                {
                    "type": "instruction",
                    "content": {
                        "title": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                        "text": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
                    }
                },
                {
                    "type": "interactive",
                    "content": {
                        "type": "practice",
                        "instruction": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                        "tasks": [
                            {
                                "id": "task_1",
                                "question": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                                "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
                            }
                        ]
                    }
                }
            ]
        }


# Global instance for use in API
ai_generator = AILessonGenerator()


def generate_ai_concept_lesson(module_data: Dict[str, Any], locale: str = 'ru') -> Dict[str, Any]:
    """Generate concept lesson using AI."""
    return ai_generator.generate_concept_lesson(module_data, locale)


def generate_ai_guided_lesson(module_data: Dict[str, Any], locale: str = 'ru') -> Dict[str, Any]:
    """Generate guided lesson using AI."""
    return ai_generator.generate_guided_lesson(module_data, locale)


def generate_ai_independent_lesson(module_data: Dict[str, Any], locale: str = 'ru') -> Dict[str, Any]:
    """Generate independent lesson using AI."""
    return ai_generator.generate_independent_lesson(module_data, locale)
