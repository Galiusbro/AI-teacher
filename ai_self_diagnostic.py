#!/usr/bin/env python3
"""
AI –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Ayaal Teacher.

AI –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∞–º —Å —Å–æ–±–æ–π:
- AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–∏–Ω–æ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–Ω–æ–≥–¥–∞ –Ω–µ—Ç)
- –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è AI

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI
2. –ê–¥–∞–ø—Ç–∏–≤–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –¥–µ–π—Å—Ç–≤–∏–∏
3. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—á–µ–Ω–∏–∫–∞
4. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import json
import time
import os
import random
from typing import Dict, List, Any, Optional
from smart_diagnostic_system import SmartDiagnosticSystem, DifficultyLevel


def print_separator(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    print(f"\n{'='*80}")
    print(f"ü§ñ {title}")
    print(f"{'='*80}")


class AISelfDiagnostic:
    """
    AI —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.

    AI –∏–≥—Ä–∞–µ—Ç –¥–≤–µ —Ä–æ–ª–∏:
    1. –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã
    2. –£—á–µ–Ω–∏–∫ - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–∏–Ω–æ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–Ω–æ–≥–¥–∞ –Ω–µ—Ç)
    """

    def __init__(self, groq_api_key: str):
        self.system = SmartDiagnosticSystem()
        self.api_key = groq_api_key
        self.conversation_history = []
        self.student_personality = self._generate_student_personality()

    def _generate_student_personality(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏."""
        personalities = [
            {
                "name": "–ú–∞—à–∞",
                "age": 10,
                "traits": ["–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è", "–∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç—Å—è", "–ª—é–±–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"],
                "strengths": ["–±—ã—Å—Ç—Ä–æ —Å—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"],
                "weaknesses": ["–∏–Ω–æ–≥–¥–∞ —Ç–æ—Ä–æ–ø–∏—Ç—Å—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏"],
                "accuracy_rate": 0.75  # 75% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            {
                "name": "–î–∏–º–∞",
                "age": 12,
                "traits": ["—Ç—â–∞—Ç–µ–ª—å–Ω—ã–π", "–ª—é–±–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "–º–µ—Ç–æ–¥–∏—á–Ω—ã–π"],
                "strengths": ["–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è"],
                "weaknesses": ["–∏–Ω–æ–≥–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç"],
                "accuracy_rate": 0.85  # 85% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            {
                "name": "–°–∞—à–∞",
                "age": 9,
                "traits": ["—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "–Ω—Ä–∞–≤–∏—Ç—Å—è —Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å", "–∞–∫—Ç–∏–≤–Ω—ã–π"],
                "strengths": ["–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"],
                "weaknesses": ["–∏–Ω–æ–≥–¥–∞ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"],
                "accuracy_rate": 0.70  # 70% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            {
                "name": "–ö–∞—Ç—è",
                "age": 11,
                "traits": ["–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç–∫–∞", "–ª—é–±–∏—Ç –ø–æ—Ä—è–¥–æ–∫", "–∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è"],
                "strengths": ["–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É"],
                "weaknesses": ["–±–æ–∏—Ç—Å—è –æ—à–∏–±–æ–∫"],
                "accuracy_rate": 0.90  # 90% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            }
        ]

        return random.choice(personalities)

    def _ai_generate_question(self, subject: str, target_age: int,
                             difficulty_level: str, question_type: str) -> Dict[str, Any]:
        """AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å."""

        if question_type == "dialogue":
            # –î–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            prompt = f"""
–¢—ã - —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.

–°–æ–∑–¥–∞–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ {target_age} –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å:
- –ï–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}"
- –°—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è
- –ú–æ—Ç–∏–≤–∞—Ü–∏—é
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ

–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±–µ–Ω–∫–∞.
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "question": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
  "correct_answer": "–¥–∏–∞–ª–æ–≥–æ–≤—ã–π_–æ—Ç–≤–µ—Ç",
  "options": []
}}
"""
        else:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π
            prompt = f"""
–¢—ã - —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.

–°–æ–∑–¥–∞–π {question_type} –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}" –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ {target_age} –ª–µ—Ç.
–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_level}.

–≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–ï–°–¢–û–í–´–ô –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–ù–ê–ù–ò–ô, –∞ –Ω–µ –¥–∏–∞–ª–æ–≥!

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
- –í–æ–∑—Ä–∞—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- –ï—Å–ª–∏ —ç—Ç–æ MCQ - –¥–∞–π 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –ø–µ—Ä–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
- –ï—Å–ª–∏ —ç—Ç–æ numeric - –¥–∞–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "question": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
  "correct_answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
  "options": ["–≤–∞—Ä–∏–∞–Ω—Ç1", "–≤–∞—Ä–∏–∞–Ω—Ç2", "–≤–∞—Ä–∏–∞–Ω—Ç3", "–≤–∞—Ä–∏–∞–Ω—Ç4"]
}}
"""

        try:
            import groq
            client = groq.Groq(api_key=self.api_key)

            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="llama-3.3-70b-versatile",
                temperature=0.7,
                max_tokens=300
            )

            response = chat_completion.choices[0].message.content

            # –ü–∞—Ä—Å–∏–º JSON
            import re
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                result = json.loads(json_match.group())
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if "question" in result and "correct_answer" in result:
                    return result
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

        # Fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é
        return self._generate_fallback_question(subject, target_age, difficulty_level, question_type)

    def _generate_fallback_question(self, subject: str, target_age: int,
                                   difficulty_level: str, question_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ AI."""

        if question_type == "dialogue":
            return {
                "question": f"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–º–µ—Ç–µ {subject}?",
                "correct_answer": "–¥–∏–∞–ª–æ–≥–æ–≤—ã–π_–æ—Ç–≤–µ—Ç",
                "options": []
            }

        elif subject == "Mathematics":
            if target_age <= 8:
                # –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–ª–∞–¥—à–∏—Ö –¥–µ—Ç–µ–π
                if question_type == "mcq_single":
                    num1, num2 = random.randint(1, 10), random.randint(1, 10)
                    correct = num1 + num2
                    return {
                        "question": f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} + {num2}?",
                        "correct_answer": str(correct),
                        "options": [str(correct), str(correct+1), str(correct-1), str(correct+2)]
                    }
                elif question_type == "numeric":
                    return {
                        "question": "–°–∫–æ–ª—å–∫–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
                        "correct_answer": "5",
                        "options": []
                    }
            else:
                # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö –¥–µ—Ç–µ–π
                if question_type == "mcq_single":
                    return {
                        "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 12 √ó 8?",
                        "correct_answer": "96",
                        "options": ["96", "84", "88", "104"]
                    }

        elif subject == "English":
            if target_age <= 8:
                if question_type == "mcq_single":
                    return {
                        "question": "–ö–∞–∫ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏ '–¥–æ–º'?",
                        "correct_answer": "house",
                        "options": ["house", "home", "hous", "haus"]
                    }
            else:
                if question_type == "mcq_single":
                    return {
                        "question": "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º: beautiful, run, quickly, house?",
                        "correct_answer": "beautiful",
                        "options": ["beautiful", "run", "quickly", "house"]
                    }

        # –û–±—â–∏–π fallback
        return {
            "question": f"–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}",
            "correct_answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç",
            "options": ["–≤–∞—Ä–∏–∞–Ω—Ç1", "–≤–∞—Ä–∏–∞–Ω—Ç2", "–≤–∞—Ä–∏–∞–Ω—Ç3", "–≤–∞—Ä–∏–∞–Ω—Ç4"]
        }

    def _ai_respond_as_student(self, question: str, question_type: str,
                             personality: Dict[str, Any], subject: str) -> Dict[str, Any]:
        """AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —É—á–µ–Ω–∏–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é."""

        # –†–µ—à–∞–µ–º, –±—É–¥–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–æ–∑—Ä–∞—Å—Ç)
        age_factor = max(0.3, min(1.0, (personality['age'] - 5) / 10))  # 5 –ª–µ—Ç = 30%, 15 –ª–µ—Ç = 100%
        subject_factor = 0.9 if "–ª—é–±–∏–º—ã–π" in str(personality.get('traits', [])) else 0.7
        accuracy_rate = personality["accuracy_rate"] * age_factor * subject_factor
        is_correct = random.random() < accuracy_rate

        if question_type == "dialogue":
            # –î–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –≤—Å–µ–≥–¥–∞ "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ", –Ω–æ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            try:
                import groq
                client = groq.Groq(api_key=self.api_key)

                # –°–æ–∑–¥–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                age_prompt = self._get_age_appropriate_prompt(personality['age'])

                prompt = f"""
–¢—ã - {personality['name']}, {personality['age']}-–ª–µ—Ç–Ω–∏–π —É—á–µ–Ω–∏–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º: {', '.join(personality['traits'])}.
–¢–µ–±–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: "{question}"

{age_prompt}
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {personality['age']} –ª–µ—Ç
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–≤–æ–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É: {', '.join(personality['traits'])}
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- {self._get_response_length_guidance(personality['age'])}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:
"""

                chat_completion = client.chat.completions.create(
                    messages=[{"role": "user", "content": prompt}],
                    model="llama-3.3-70b-versatile",
                    temperature=0.9,  # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                    max_tokens=self._get_max_tokens_for_age(personality['age'])
                )

                ai_response = chat_completion.choices[0].message.content.strip()

                return {
                    "answer": ai_response,
                    "is_correct": True,
                    "time_spent_sec": self._get_realistic_response_time(personality['age'], question_type)
                }

            except Exception as e:
                # Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º
                return self._get_age_appropriate_fallback(personality, question_type)

        else:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º - –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
            if is_correct:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                return {
                    "answer": self._generate_correct_answer(subject, personality['age']),
                    "is_correct": True,
                    "time_spent_sec": self._get_realistic_response_time(personality['age'], question_type)
                }
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                return {
                    "answer": self._generate_wrong_answer(subject, personality['age']),
                    "is_correct": False,
                    "time_spent_sec": self._get_realistic_response_time(personality['age'], question_type),
                    "comment": self._generate_childlike_comment(personality, subject)
                }

    def _get_age_appropriate_prompt(self, age: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç."""
        if age <= 7:
            return """–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ 6-7 –ª–µ—Ç:
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ò–Ω–æ–≥–¥–∞ –ø–æ–≤—Ç–æ—Ä—è–π —Å–ª–æ–≤–∞ –∏–ª–∏ –Ω–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π
- –í—ã—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏ –æ—á–µ–Ω—å —è—Ä–∫–æ
- –ú–æ–∂–µ—à—å –ø—É—Ç–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö"""
        elif age <= 10:
            return """–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ 8-10 –ª–µ—Ç:
- –ì–æ–≤–æ—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç—Å–∫–∏–π –∂–∞—Ä–≥–æ–Ω
- –í—ã—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏ –∂–∏–≤–æ
- –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è –Ω–∞ –¥–µ—Ç–∞–ª–∏"""
        elif age <= 13:
            return """–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø–æ–¥—Ä–æ—Å—Ç–æ–∫ 11-13 –ª–µ—Ç:
- –ì–æ–≤–æ—Ä–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥
- –í—ã—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏ —É–º–µ—Ä–µ–Ω–Ω–æ
- –ü–æ–∫–∞–∑—ã–≤–∞–π —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å"""
        else:
            return """–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø–æ–¥—Ä–æ—Å—Ç–æ–∫ 14-16 –ª–µ—Ç:
- –ì–æ–≤–æ—Ä–∏ —Å–ª–æ–∂–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ –≤–∑—Ä–æ—Å–ª—ã–π —Å–ª–æ–≤–∞—Ä—å
- –í—ã—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ
- –ü–æ–∫–∞–∑—ã–≤–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"""

    def _get_response_length_guidance(self, age: int) -> str:
        """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        if age <= 7:
            return "–î–ª–∏–Ω–æ–π 1-2 –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–µ—Ç–∏ —ç—Ç–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≥–æ–≤–æ—Ä—è—Ç –º–∞–ª–æ)"
        elif age <= 10:
            return "–î–ª–∏–Ω–æ–π 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–µ—Ç–∏ –≥–æ–≤–æ—Ä—è—Ç –±–æ–ª—å—à–µ, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –∫—Ä–∞—Ç–∫–æ)"
        elif age <= 13:
            return "–î–ª–∏–Ω–æ–π 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ–¥—Ä–æ—Å—Ç–∫–∏ –º–æ–≥—É—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ)"
        else:
            return "–î–ª–∏–Ω–æ–π 4-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–∏–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ –≥–æ–≤–æ—Ä—è—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ)"

    def _get_max_tokens_for_age(self, age: int) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        if age <= 7:
            return 50   # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        elif age <= 10:
            return 100  # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        elif age <= 13:
            return 150  # –°—Ä–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã
        else:
            return 200  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

    def _get_realistic_response_time(self, age: int, question_type: str) -> int:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        base_time = {
            "dialogue": 20,
            "mcq_single": 15,
            "numeric": 30,
            "short_text": 45
        }.get(question_type, 30)

        # –î–µ—Ç–∏ –º–ª–∞–¥—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ç–≤–µ—á–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ
        age_factor = 1.5 if age <= 8 else 1.2 if age <= 10 else 1.0

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å
        variation = random.uniform(0.7, 1.5)

        return int(base_time * age_factor * variation)

    def _generate_correct_answer(self, subject: str, age: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É."""
        if subject == "Mathematics":
            if age <= 8:
                return str(random.randint(5, 20))  # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
            else:
                return str(random.randint(10, 100))  # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —á–∏—Å–ª–∞
        elif subject == "English":
            if age <= 8:
                return random.choice(["cat", "dog", "house", "tree"])
            else:
                return random.choice(["beautiful", "interesting", "important", "difficult"])
        else:
            return "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç"

    def _generate_wrong_answer(self, subject: str, age: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        if subject == "Mathematics":
            # –î–µ—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
            if age <= 8:
                return str(random.randint(1, 10))  # –ü—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            else:
                return str(random.randint(1, 50))  # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        elif subject == "English":
            # –û—à–∏–±–∫–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            if age <= 8:
                return random.choice(["kat", "dogf", "hous", "tre"])
            else:
                return random.choice(["beautifull", "interesing", "importent", "dificalt"])
        else:
            return "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç"

    def _generate_childlike_comment(self, personality: Dict[str, Any], subject: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        age = personality['age']
        name = personality['name']

        if age <= 8:
            comments = [
                f"{name} –ø–æ—á–µ—Å–∞–ª –≥–æ–ª–æ–≤—É –∏ —Å–∫–∞–∑–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                f"{name} –∑–∞–¥—É–º–∞–ª—Å—è –∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ",
                f"{name} –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –æ—à–∏–±—Å—è",
                f"{name} –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–±–æ—Ä–º–æ—Ç–∞–ª –æ—Ç–≤–µ—Ç"
            ]
        elif age <= 12:
            comments = [
                f"{name} –Ω–∞—Ö–º—É—Ä–∏–ª—Å—è –∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                f"{name} –ø–æ–¥—É–º–∞–ª –∏ –¥–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                f"{name} –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª",
                f"{name} –æ—à–∏–±—Å—è –≤ {subject}"
            ]
        else:
            comments = [
                f"{name} –∑–∞–¥—É–º–∞–ª—Å—è –∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                f"{name} –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª",
                f"{name} –æ—à–∏–±—Å—è –≤ {subject}",
                f"{name} –¥–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
            ]

        return random.choice(comments)

    def _get_age_appropriate_fallback(self, personality: Dict[str, Any], question_type: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –æ—Ç–≤–µ—Ç."""
        age = personality['age']
        name = personality['name']

        if age <= 7:
            responses = [
                f"{name} –∫–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤–æ–π –∏ –≥–æ–≤–æ—Ä–∏—Ç: '–ù–µ –∑–Ω–∞—é...'",
                f"{name} —É–ª—ã–±–∞–µ—Ç—Å—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç: '–•–æ—Ä–æ—à–æ!'",
                f"{name} –¥—É–º–∞–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç: '–ú–æ–∂–µ—Ç –±—ã—Ç—å...'"
            ]
        elif age <= 10:
            responses = [
                f"{name} –æ—Ç–≤–µ—á–∞–µ—Ç: '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'",
                f"{name} –≥–æ–≤–æ—Ä–∏—Ç: '–Ø –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å —Ç–∞–∫–∏–µ –≤–µ—â–∏!'",
                f"{name} –¥—É–º–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç: '–ù–∞–≤–µ—Ä–Ω–æ–µ, –¥–∞...'"
            ]
        else:
            responses = [
                f"{name} –æ—Ç–≤–µ—á–∞–µ—Ç: '–≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'",
                f"{name} –≥–æ–≤–æ—Ä–∏—Ç: '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ –¥–µ–ª–∞—Ç—å'",
                f"{name} –∑–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è: '–î—É–º–∞—é, —ç—Ç–æ –≤–∞–∂–Ω–æ...'"
            ]

        return {
            "answer": random.choice(responses),
            "is_correct": True,
            "time_spent_sec": self._get_realistic_response_time(age, question_type)
        }

    def run_self_diagnostic(self, subjects: List[str] = ["Mathematics", "English"]):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç AI —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.

        AI –∏–≥—Ä–∞–µ—Ç –æ–±–µ —Ä–æ–ª–∏: —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —É—á–µ–Ω–∏–∫–∞.
        """
        print_separator("ü§ñü§ñ AI –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        print("   AI –∏–≥—Ä–∞–µ—Ç —Ä–æ–ª—å —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ò —É—á–µ–Ω–∏–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
        print(f"   üé≠ –£—á–µ–Ω–∏–∫: {self.student_personality['name']}, {self.student_personality['age']} –ª–µ—Ç")
        print(f"   üìä –•–∞—Ä–∞–∫—Ç–µ—Ä: {', '.join(self.student_personality['traits'])}")
        print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {self.student_personality['accuracy_rate']:.0%}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞
        print_separator("üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–§–ò–õ–Ø")

        student_id = f"ai_student_{int(time.time())}"
        profile = self.system.initialize_student_profile(
            student_id=student_id,
            age=self.student_personality['age'],
            subjects=subjects
        )

        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {self.student_personality['name']}")
        print(f"   üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(subjects)}")
        levels_str = [f'{subj}: {data["current_level"]}' for subj, data in profile.subjects.items()]
        print(f"   üéØ –ù–∞—á–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {levels_str}")

        # –ü—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print_separator("üß† –ü–†–û–¶–ï–°–° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")

        total_questions = 0
        max_questions_per_subject = 6

        for subject in subjects:
            print(f"\n   üìñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject}")

            for question_num in range(max_questions_per_subject):
                try:
                    # AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å
                    question = self.system.generate_next_question(student_id, subject)

                    if question is None:
                        print(f"   üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ {subject} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        break

                    total_questions += 1

                    print(f"\n   ü§ñ –í–æ–ø—Ä–æ—Å {total_questions} (AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω):")
                    print(f"      üéØ –£—Ä–æ–≤–µ–Ω—å: {question.difficulty_level.value}")
                    print(f"      üéì –¶–µ–ª–µ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {question.target_age} –ª–µ—Ç")
                    print(f"      üß© –¢–∏–ø: {question.question_type}")
                    print(f"      ‚ùì {question.content['question']}")

                    # AI –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫ —É—á–µ–Ω–∏–∫
                    student_response = self._ai_respond_as_student(
                        question.content['question'],
                        question.question_type,
                        self.student_personality,
                        subject
                    )

                    if question.question_type == "mcq_single":
                        print(f"      üé≠ {self.student_personality['name']} –≤—ã–±–∏—Ä–∞–µ—Ç: {student_response['answer']}")
                    else:
                        print(f"      üé≠ {self.student_personality['name']} –æ—Ç–≤–µ—á–∞–µ—Ç: {student_response['answer']}")

                    if 'comment' in student_response:
                        print(f"      üí≠ {student_response['comment']}")

                    print(f"      ‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {student_response['time_spent_sec']:.1f} —Å–µ–∫")
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    result = self.system.process_answer(
                        student_id=student_id,
                        question_id=question.id,
                        answer={"answer": student_response['answer']},
                        time_spent_sec=student_response['time_spent_sec'],
                        profile=profile
                    )

                    is_correct = result['is_correct']
                    print(f"      ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–ª–∞: {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
                    print(f"      üìä –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['confidence_score']:.2f}")
                    print(f"      üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {result['new_difficulty_level']}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    self.conversation_history.append({
                        "question_num": total_questions,
                        "subject": subject,
                        "question": question.content['question'],
                        "student_answer": student_response['answer'],
                        "is_correct": is_correct,
                        "difficulty_level": question.difficulty_level.value,
                        "new_difficulty_level": result['new_difficulty_level']
                    })

                    time.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ {total_questions}: {e}")
                    continue

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print_separator("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")

        learning_plan = self.system.generate_learning_plan(student_id)

        print(f"   üé≠ –£–ß–ï–ù–ò–ö:")
        print(f"      –ò–º—è: {self.student_personality['name']}")
        print(f"      –í–æ–∑—Ä–∞—Å—Ç: {self.student_personality['age']} –ª–µ—Ç")
        print(f"      –•–∞—Ä–∞–∫—Ç–µ—Ä: {', '.join(self.student_personality['traits'])}")
        print(f"   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print(f"      –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"      –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {learning_plan['overall_level']}")

        print("\n   üìö –û–¶–ï–ù–ö–ê –ü–û –ü–†–ï–î–ú–ï–¢–ê–ú:")
        for subject, data in learning_plan['subject_breakdown'].items():
            accuracy = data['correct_answers'] / max(data['questions_asked'], 1)
            print(f"      üìñ {subject}: {accuracy:.1%}")
            print(f"         –£—Ä–æ–≤–µ–Ω—å: {data['current_level']}")
            print(f"         –í—Ä–µ–º—è: {data['total_time_spent'] / max(data['questions_asked'], 1):.1f} —Å–µ–∫")
        if learning_plan['strengths']:
            print("\n   üí™ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:")
            for strength in learning_plan['strengths'][:3]:
                print(f"      ‚Ä¢ {strength}")

        if learning_plan['weaknesses']:
            print("\n   üéØ –ó–û–ù–´ –†–ê–ó–í–ò–¢–ò–Ø:")
            for weakness in learning_plan['weaknesses'][:3]:
                print(f"      ‚Ä¢ {weakness}")

        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        psych_profile = learning_plan.get('psychological_profile', {})
        if psych_profile:
            print("\n   üß† –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:")
            for key, value in psych_profile.items():
                print(f"      ‚Ä¢ {key}: {value}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = learning_plan.get('recommendations', {})
        if recommendations:
            print("\n   üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if 'immediate_focus' in recommendations:
                print("      –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å:")
                for focus in recommendations['immediate_focus'][:2]:
                    print(f"         ‚Ä¢ {focus}")

            if 'study_schedule' in recommendations:
                schedule = recommendations['study_schedule']
                print("      –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è:")
                print(f"         ‚Ä¢ {schedule.get('daily_time', 45)} –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
                if 'preferred_subjects' in schedule:
                    print(f"         ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {', '.join(schedule['preferred_subjects'])}")

            if 'teaching_approach' in recommendations:
                print("      –ü–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é:")
                print(f"         ‚Ä¢ {recommendations['teaching_approach']}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        print_separator("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ê–ü–¢–ê–¶–ò–ò")

        level_changes = {}
        for entry in self.conversation_history:
            subj = entry['subject']
            old_level = entry['difficulty_level']
            new_level = entry['new_difficulty_level']

            if subj not in level_changes:
                level_changes[subj] = []
            level_changes[subj].append((old_level, new_level))

        for subject, changes in level_changes.items():
            print(f"   üìä {subject} - –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:")
            for i, (old_level, new_level) in enumerate(changes[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
                status = "üìà –ø–æ–≤—ã—à–µ–Ω–∞" if self._level_to_number(new_level) > self._level_to_number(old_level) else \
                        "üìâ –ø–æ–Ω–∏–∂–µ–Ω–∞" if self._level_to_number(new_level) < self._level_to_number(old_level) else "‚û°Ô∏è —Å—Ç–∞–±–∏–ª—å–Ω–∞"
                print(f"      –í–æ–ø—Ä–æ—Å {i+1}: {old_level} ‚Üí {new_level} ({status})")

        print_separator("üéâ –í–´–í–û–î–´")

        print("   üöÄ AI –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("   üí° –ß–¢–û –ü–†–û–ò–ó–û–®–õ–û:")
        print("      ‚úÖ AI —Å–æ–∑–¥–∞–ª —É—á–µ–Ω–∏–∫–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é")
        print("      ‚úÖ AI –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –≤–æ–ø—Ä–æ—Å—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        print("      ‚úÖ AI –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–∏–Ω–æ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–Ω–æ–≥–¥–∞ –Ω–µ—Ç)")
        print("      ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("      ‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è")
        print("      ‚úÖ –°–æ–±—Ä–∞–Ω –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞")
        print("   üéØ –≠–¢–û –î–û–ö–ê–ó–´–í–ê–ï–¢:")
        print("      ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
        print("      ‚Ä¢ AI –º–æ–∂–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤")
        print("      ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –æ—Ç–≤–µ—Ç—ã")
        print("      ‚Ä¢ –°–æ–∑–¥–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è")
        print("      ‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("      ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞ –¥–ª—è –ª—é–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        print("   üîÆ –ë–£–î–£–©–ï–ï –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø:")
        print("      –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å")
        print("      –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –æ–±—É—á–µ–Ω–∏–µ!")
        print("      üöÄ‚ú®üéì")
    def _level_to_number(self, level: str) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        levels = {
            "beginner": 1,
            "elementary": 2,
            "intermediate": 3,
            "advanced": 4,
            "expert": 5
        }
        return levels.get(level, 0)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AI —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('GROQ_API_KEY')
    if not api_key:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export GROQ_API_KEY='your_key_here'")
        return

    print("üöÄ –ó–ê–ü–£–°–ö AI –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("   AI –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Ä–æ–ª—å —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ò —É—á–µ–Ω–∏–∫–∞!")
    print("   –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ AI –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω—è–º —É—á–µ–Ω–∏–∫–æ–≤")

    # –°–æ–∑–¥–∞–µ–º AI —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    ai_diagnostic = AISelfDiagnostic(api_key)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    ai_diagnostic.run_self_diagnostic(["Mathematics", "English"])


if __name__ == "__main__":
    main()
