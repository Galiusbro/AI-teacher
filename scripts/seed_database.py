#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

–ó–∞–≥—Ä—É–∂–∞–µ—Ç:
- subjects (–ø—Ä–µ–¥–º–µ—Ç—ã)
- stages (—É—Ä–æ–≤–Ω–∏ –æ–±—É—á–µ–Ω–∏—è)
- stage_subject —Å–≤—è–∑–∏
"""

import os
import psycopg2
import json
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432'),
    'database': os.getenv('DB_NAME', 'ayaal_teacher'),
    'user': os.getenv('DB_USER', 'gp'),
    'password': os.getenv('DB_PASSWORD', '')
}


def get_db_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(**DB_CONFIG)


def load_subject_registry():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ subject_registry.json."""
    try:
        with open('curriculum/subject_registry.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª curriculum/subject_registry.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None


def seed_subjects_and_stages(conn):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —É—Ä–æ–≤–Ω–∏ –æ–±—É—á–µ–Ω–∏—è."""
    print("üå± –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏...")
    
    with conn.cursor() as cur:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –æ–±—É—á–µ–Ω–∏—è (stages)
        print("üìö –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –æ–±—É—á–µ–Ω–∏—è...")
        stages = [
            ('stage_primary', 'Primary', '–ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞ (1-4 –∫–ª–∞—Å—Å—ã)'),
            ('stage_lower_secondary', 'Lower Secondary', '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ (5-7 –∫–ª–∞—Å—Å—ã)'),
            ('stage_upper_secondary', 'Upper Secondary', '–°—Ç–∞—Ä—à–∞—è —à–∫–æ–ª–∞ (8-11 –∫–ª–∞—Å—Å—ã)'),
            ('stage_advanced', 'Advanced', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (A-Level, IB)')
        ]
        
        for code, title_en, title_ru in stages:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
            age_ranges = {
                'stage_primary': (6, 10),
                'stage_lower_secondary': (11, 13),
                'stage_upper_secondary': (14, 17),
                'stage_advanced': (16, 19)
            }
            age_min, age_max = age_ranges.get(code, (6, 19))
            
            cur.execute("""
                INSERT INTO stage (code, title, age_min, age_max)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (code) DO UPDATE SET
                    title = EXCLUDED.title,
                    age_min = EXCLUDED.age_min,
                    age_max = EXCLUDED.age_max
            """, (code, title_en, age_min, age_max))
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(stages)} —É—Ä–æ–≤–Ω–µ–π –æ–±—É—á–µ–Ω–∏—è")
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ subject_registry.json
        print("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã...")
        subject_registry = load_subject_registry()
        
        if subject_registry and 'subjects' in subject_registry:
            subjects = subject_registry['subjects']
            
            for subject in subjects:
                code = subject['code']
                titles = subject.get('titles', {})
                title_en = titles.get('en', code)
                title_ru = titles.get('ru', code)
                
                # –°–æ–∑–¥–∞–µ–º locales JSONB —Å —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                locales = {
                    "ru": {"title": title_ru},
                    "en": {"title": title_en}
                }
                
                cur.execute("""
                    INSERT INTO subject (code, title, locales)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (code) DO UPDATE SET
                        title = EXCLUDED.title,
                        locales = EXCLUDED.locales
                """, (code, title_en, json.dumps(locales)))
            
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        else:
            print("   ‚ö†Ô∏è  subject_registry.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω
            basic_subjects = [
                ('Mathematics', 'Mathematics', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏'),
                ('English', 'English', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
                ('Science', 'Science', '–ï—Å—Ç–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏'),
                ('History', 'History', '–ò—Å—Ç–æ—Ä–∏—è', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏'),
                ('Geography', 'Geography', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏')
            ]
            
            for code, title, title_ru, description in basic_subjects:
                # –°–æ–∑–¥–∞–µ–º locales JSONB —Å —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                locales = {
                    "ru": {"title": title_ru},
                    "en": {"title": title}
                }
                
                cur.execute("""
                    INSERT INTO subject (code, title, locales)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (code) DO UPDATE SET
                        title = EXCLUDED.title,
                        locales = EXCLUDED.locales
                """, (code, title, json.dumps(locales)))
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(basic_subjects)} –±–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ stage_subject –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        print("üîó –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –ø—Ä–µ–¥–º–µ—Ç-—É—Ä–æ–≤–µ–Ω—å...")
        cur.execute("SELECT id FROM stage")
        stage_ids = [row[0] for row in cur.fetchall()]
        
        cur.execute("SELECT id FROM subject")
        subject_ids = [row[0] for row in cur.fetchall()]
        
        connections_created = 0
        for stage_id in stage_ids:
            for subject_id in subject_ids:
                cur.execute("""
                    INSERT INTO stage_subject (stage_id, subject_id)
                    VALUES (%s, %s)
                    ON CONFLICT (stage_id, subject_id) DO NOTHING
                """, (stage_id, subject_id))
                if cur.rowcount > 0:
                    connections_created += 1
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {connections_created} —Å–≤—è–∑–µ–π –ø—Ä–µ–¥–º–µ—Ç-—É—Ä–æ–≤–µ–Ω—å")
        
        conn.commit()
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


def verify_seeding(conn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º stages
        cur.execute("SELECT COUNT(*) as count FROM stage")
        stage_count = cur.fetchone()['count']
        print(f"   üìö –£—Ä–æ–≤–Ω–µ–π –æ–±—É—á–µ–Ω–∏—è: {stage_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º subjects
        cur.execute("SELECT COUNT(*) as count FROM subject")
        subject_count = cur.fetchone()['count']
        print(f"   üìñ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subject_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        cur.execute("SELECT COUNT(*) as count FROM stage_subject")
        connection_count = cur.fetchone()['count']
        print(f"   üîó –°–≤—è–∑–µ–π –ø—Ä–µ–¥–º–µ—Ç-—É—Ä–æ–≤–µ–Ω—å: {connection_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print("\nüìö –ü—Ä–∏–º–µ—Ä—ã —É—Ä–æ–≤–Ω–µ–π:")
        cur.execute("SELECT code, title, age_min, age_max FROM stage LIMIT 3")
        for row in cur.fetchall():
            print(f"   ‚Ä¢ {row['code']}: {row['title']} (–≤–æ–∑—Ä–∞—Å—Ç {row['age_min']}-{row['age_max']})")
        
        print("\nüìñ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
        cur.execute("SELECT code, title, locales FROM subject LIMIT 5")
        for row in cur.fetchall():
            locales = row['locales']
            ru_title = locales.get('ru', {}).get('title', 'N/A') if locales else 'N/A'
            print(f"   ‚Ä¢ {row['code']}: {row['title']} (RU: {ru_title})")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Ayaal Teacher")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = get_db_connection()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        seed_subjects_and_stages(conn)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        verify_seeding(conn)
        
        print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ import_modules.py")
        
    except psycopg2.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        if 'conn' in locals():
            conn.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    return 0


if __name__ == "__main__":
    exit(main())
