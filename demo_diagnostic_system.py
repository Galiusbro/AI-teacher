#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã Ayaal Teacher.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
2. –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
3. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–æ–º
4. –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π mastery
"""

import requests
import json
import time
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE = "http://localhost:3000"
STUDENT_ID = "87b7df4c-0246-46d8-af27-54fdb1a826f7"
MATH_SUBJECT_ID = None
PRIMARY_STAGE_ID = None


def print_separator(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    print(f"\n{'='*80}")
    print(f"üéØ {title}")
    print(f"{'='*80}")


def run_sql_script(script_path):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç."""
    print(f"üìÑ –í—ã–ø–æ–ª–Ω—è–µ–º {script_path}...")
    try:
        result = subprocess.run([
            'psql', '-h', 'localhost', '-p', '5432', '-U', 'gp', '-d', 'ayaal_teacher',
            '-f', script_path
        ], capture_output=True, text=True, cwd='/Users/gp/projects/ayaal/teacher')

        if result.returncode == 0:
            print("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def get_subject_and_stage_ids():
    """–ü–æ–ª—É—á–∞–µ—Ç UUID—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è."""
    global MATH_SUBJECT_ID, PRIMARY_STAGE_ID

    print("üîç –ü–æ–ª—É—á–∞–µ–º UUID—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UUID–æ–≤
    try:
        import subprocess

        # –ü–æ–ª—É—á–∞–µ–º UUID –ø—Ä–µ–¥–º–µ—Ç–∞ Mathematics
        result = subprocess.run([
            'psql', '-h', 'localhost', '-p', '5432', '-U', 'gp', '-d', 'ayaal_teacher',
            '-c', "SELECT id FROM subject WHERE code = 'Mathematics';"
        ], capture_output=True, text=True)

        if result.returncode == 0:
            lines = result.stdout.split('\n')
            for line in lines:
                line = line.strip()
                if len(line) == 36 and '-' in line:  # UUID —Ñ–æ—Ä–º–∞—Ç
                    MATH_SUBJECT_ID = line
                    print(f"‚úÖ Mathematics ID: {MATH_SUBJECT_ID}")
                    break

        # –ü–æ–ª—É—á–∞–µ–º UUID —É—Ä–æ–≤–Ω—è stage_primary
        result = subprocess.run([
            'psql', '-h', 'localhost', '-p', '5432', '-U', 'gp', '-d', 'ayaal_teacher',
            '-c', "SELECT id FROM stage WHERE code = 'stage_primary';"
        ], capture_output=True, text=True)

        if result.returncode == 0:
            lines = result.stdout.split('\n')
            for line in lines:
                line = line.strip()
                if len(line) == 36 and '-' in line:
                    PRIMARY_STAGE_ID = line
                    print(f"‚úÖ Primary Stage ID: {PRIMARY_STAGE_ID}")
                    break

        if MATH_SUBJECT_ID and PRIMARY_STAGE_ID:
            return True
        else:
            print(f"‚ùå MATH_SUBJECT_ID: {MATH_SUBJECT_ID}")
            print(f"‚ùå PRIMARY_STAGE_ID: {PRIMARY_STAGE_ID}")
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID—ã")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID–æ–≤: {e}")
        return False


def api_call(endpoint, method="GET", data=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API."""
    url = f"{API_BASE}{endpoint}"
    headers = {"Content-Type": "application/json"}

    try:
        if method == "POST":
            response = requests.post(url, json=data, headers=headers)
        else:
            response = requests.get(url)

        return response.json()
    except Exception as e:
        return {"error": str(e)}


def setup_database():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print_separator("–ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")

    # 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
    if not run_sql_script("db/migrations/007_diagnostic_assessment.sql"):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        return False

    # 2. –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if not run_sql_script("create_diagnostic_questions.sql"):
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
        return False

    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return True


def demonstrate_diagnostic_flow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print_separator("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞...")
    status = api_call(f"/api/diagnostic/student/{STUDENT_ID}")

    if "error" in status:
        print(f"‚ùå –û—à–∏–±–∫–∞: {status['error']}")
        return

    print(f"   –°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {status['diagnostic_status']}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {status.get('recommended_difficulty', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")

    # 2. –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é
    print("\n2Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é...")
    start_result = api_call("/api/diagnostic/start", "POST", {
        "student_id": STUDENT_ID,
        "subject_id": MATH_SUBJECT_ID,
        "stage_id": PRIMARY_STAGE_ID
    })

    if "error" in start_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {start_result['error']}")
        return

    session_id = start_result['session_id']
    print(f"   –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")

    # 3. –ü—Ä–æ—Ö–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (—Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–∞)
    print("\n3Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")

    question_count = 0
    while question_count < 8:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question_result = api_call("/api/diagnostic/question", "POST", {
            "session_id": session_id
        })

        if "question" not in question_result:
            if "message" in question_result and "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in question_result['message']:
                print(f"   –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {question_result['message']}")
                break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {question_result}")
                break

        question = question_result['question']
        question_count += 1

        print(f"\n   –í–æ–ø—Ä–æ—Å {question_count}: {question['content']['question']}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 80% –≤–æ–ø—Ä–æ—Å–æ–≤
        import random
        is_correct_answer = random.random() < 0.8

        if question['question_type'] == 'mcq':
            # –î–ª—è MCQ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            if is_correct_answer:
                selected_option = question['content']['correct_option'] if 'correct_option' in question['content'] else 1
            else:
                selected_option = random.randint(0, len(question['content']['options']) - 1)

            answer = {"selected_option": selected_option}
        else:
            # –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            answer = {"answer": "42" if is_correct_answer else "–Ω–µ –∑–Ω–∞—é"}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        answer_result = api_call("/api/diagnostic/answer", "POST", {
            "session_id": session_id,
            "question_id": question['question_id'],
            "answer": answer,
            "time_spent_sec": random.randint(30, 120)
        })

        if "error" in answer_result:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {answer_result['error']}")
            continue

        result = answer_result['result']
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' if result['is_correct'] else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
        print(f"      –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['total_score']:.2f}")
        print(f"      –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {result['next_level']}")

        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # 4. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    print("\n4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    complete_result = api_call("/api/diagnostic/complete", "POST", {
        "session_id": session_id
    })

    if "error" in complete_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {complete_result['error']}")
        return

    diagnostic_result = complete_result['diagnostic_result']
    print("   –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üìä")
    print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {diagnostic_result['estimated_level']}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {diagnostic_result['confidence_score']:.3f}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {diagnostic_result['recommended_difficulty']}")

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    results = api_call(f"/api/diagnostic/results/{session_id}")

    if "error" not in results:
        results_data = results['results']
        print("   –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {results_data['total_questions']}")
        print(f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results_data['correct_answers']}")
        print(f"   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {results_data['accuracy']:.3f}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {results_data['avg_time_spent']:.1f} —Å–µ–∫")
        print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º: {results_data['level_distribution']}")

        recommendations = results['recommendations']
        print("\n   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations.get('study_plan', []):
            print(f"   ‚Ä¢ {rec}")
        for rec in recommendations.get('focus_areas', []):
            print(f"   ‚Ä¢ {rec}")

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞...")
    updated_status = api_call(f"/api/diagnostic/student/{STUDENT_ID}")

    if "error" not in updated_status:
        print("   –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {updated_status['diagnostic_status']}")
        print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {updated_status.get('current_level', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {updated_status.get('recommended_difficulty', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")


def demonstrate_integration_with_mastery():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π mastery."""
    print_separator("–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–ò–°–¢–ï–ú–û–ô MASTERY")

    print("üîó –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π mastery:")
    print("   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É—á–µ–Ω–∏–∫–∞")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Ä–æ–∫–æ–≤")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ mastery –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    status = api_call(f"/api/diagnostic/student/{STUDENT_ID}")

    if "error" not in status and status['diagnostic_status'] == 'completed':
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   ‚Ä¢ –£—á–µ–Ω–∏–∫ –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å: {status.get('current_level', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {status.get('recommended_difficulty', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
        print("   ‚Ä¢ –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π mastery")
    else:
        print("\n‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É—á–µ–Ω–∏–∫–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π")

    # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not setup_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ UUID—ã
    if not get_subject_and_stage_ids():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è")
        return

    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    demonstrate_diagnostic_flow()

    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å mastery
    demonstrate_integration_with_mastery()

    print_separator("–ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    print("\nüí° –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
    print("   ‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É—á–µ–Ω–∏–∫–∞")
    print("   ‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—É—á–µ–Ω–∏—é")
    print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚úÖ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")
    print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π mastery")

    print("\nüéì –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:")
    print("   ‚Ä¢ –ù–æ–≤—ã–µ —É—á–µ–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ mastery –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("   ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞")


if __name__ == "__main__":
    main()
