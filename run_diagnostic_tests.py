#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

–ó–∞–ø—É—Å–∫–∞–µ—Ç:
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- API —Ç–µ—Å—Ç—ã
- –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import os
import time
from typing import List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def run_test_module(module_name: str) -> Tuple[int, int]:
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    try:
        if module_name == "comprehensive":
            from test_comprehensive_diagnostic import run_all_tests
            print(f"\n{'='*60}")
            print(f"üß™ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–´–• –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
            print(f"{'='*60}")
            run_all_tests()
            return 1, 0  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏
            
        elif module_name == "api":
            from test_diagnostic_api import run_api_tests
            print(f"\n{'='*60}")
            print(f"üîå –ó–ê–ü–£–°–ö API –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
            print(f"{'='*60}")
            run_api_tests()
            return 1, 0  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤: {module_name}")
            return 0, 1
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
        return 0, 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ {module_name}: {e}")
        return 0, 1

def run_individual_tests():
    """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print(f"\n{'='*60}")
    print(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–¢–î–ï–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print(f"{'='*60}")
    
    try:
        from smart_diagnostic_system import SmartDiagnosticSystem, DifficultyLevel
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        system = SmartDiagnosticSystem()
        assert system is not None
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞...")
        profile = system.initialize_student_profile("test_001", 12, ["Mathematics", "English"])
        assert profile.student_id == "test_001"
        assert profile.age == 12
        assert len(profile.subjects) == 2
        print("   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...")
        question = system.generate_next_question("test_001", "Mathematics")
        assert question is not None
        assert question.question_type == "dialogue"
        print("   ‚úÖ –î–∏–∞–ª–æ–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞...")
        result = system.process_answer("test_001", question.id, {"answer": "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞! üòä"}, 10.0)
        assert "is_correct" in result
        assert "confidence_score" in result
        assert "new_difficulty_level" in result
        print("   ‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è...")
        plan = system.generate_learning_plan("test_001")
        assert "overall_level" in plan
        assert "psychological_profile" in plan
        assert "recommendations" in plan
        print("   ‚úÖ –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 6: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î...")
        session_record = system.export_session_record("test_001")
        assert "student_id" in session_record
        assert "persona" in session_record
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        print(f"\nüéâ –í—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ñ–∞–π–ª–æ–≤."""
    print(f"\n{'='*60}")
    print(f"üìã –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –§–ê–ô–õ–û–í")
    print(f"{'='*60}")
    
    required_files = [
        "smart_diagnostic_system.py",
        "diagnostic_utils.py",
        "mastery_calculator.py",
        "templates/diagnostic_sample_10yo.json",
        "templates/diagnostic.schema.json",
        "curriculum/diagnostic/diagnostic.template.json"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"   ‚úÖ {file_path}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    
    print(f"\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 80)
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        return 1
    
    # –ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if not run_individual_tests():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")
        return 1
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    test_modules = ["comprehensive", "api"]
    total_passed = 0
    total_failed = 0
    
    for module in test_modules:
        passed, failed = run_test_module(module)
        total_passed += passed
        total_failed += failed
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*80}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìã –ú–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(test_modules)}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {total_passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è –º–æ–¥—É–ª–µ–π: {total_failed}")
    
    if total_failed == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üí° –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
